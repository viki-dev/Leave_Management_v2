/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.leave_management_v2.hrdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.leave_management_v2.hrdb.models.query.AddLeaveBalRequest;
import com.leave_management_v2.hrdb.models.query.ApplyLeaveRequest;
import com.leave_management_v2.hrdb.models.query.ApproveRejectQueryRequest;
import com.leave_management_v2.hrdb.service.HrdbQueryExecutorService;

@RestController(value = "Hrdb.QueryExecutionController")
@RequestMapping("/hrdb/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private HrdbQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/AddLeaveBal", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "add leave balance")
    public IntegerWrapper executeAddLeaveBal(@Valid @RequestBody AddLeaveBalRequest addLeaveBalRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: AddLeaveBal");
        Integer _result = queryService.executeAddLeaveBal(addLeaveBalRequest);
        LOGGER.debug("got the result for named query: AddLeaveBal, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/ApplyLeave", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query for apply leave")
    public IntegerWrapper executeApplyLeave(@Valid @RequestBody ApplyLeaveRequest applyLeaveRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: ApplyLeave");
        Integer _result = queryService.executeApplyLeave(applyLeaveRequest);
        LOGGER.debug("got the result for named query: ApplyLeave, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/ApproveRejectQuery", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query for Approve Reject")
    public IntegerWrapper executeApproveRejectQuery(@Valid @RequestBody ApproveRejectQueryRequest approveRejectQueryRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: ApproveRejectQuery");
        Integer _result = queryService.executeApproveRejectQuery(approveRejectQueryRequest);
        LOGGER.debug("got the result for named query: ApproveRejectQuery, result:{}", _result);
        return new IntegerWrapper(_result);
    }

}